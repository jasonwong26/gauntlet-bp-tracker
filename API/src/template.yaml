AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  gauntlet-bp-tracker-api

  Websocket API for gauntlet-bp-tracker.

Parameters:
  TableName:
    Type: String
    Default: 'gauntlet_bp_tracker'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  StageName:
    Type: String
    Default: 'Dev'
    Description: (Required) The stage for this deployment.
    MinLength: 3
    MaxLength: 10
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: 'Required. Can be characters only. No numbers or special characters allowed.'
  DomainName:
    Type: String
    Default: 'api.gauntlet.developermouse.com'
    Description: (Required) The domain for the api.
    MinLength: 3
    AllowedPattern: ^[A-Za-z0-9.\-]+$
    ConstraintDescription: 'Required. Must be a valid domain value that the AWS account has access to.'

Globals:
  Function:
    MemorySize: 256
    Runtime: nodejs12.x
    Tags:
      project: Gauntlet BP Tracker
      stage: !Ref StageName

Resources:  
  GauntletWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub
        - GauntletWebSocket-${StageName}
        - { StageName: !Ref StageName }
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Tags:
        project: Gauntlet BP Tracker
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - DefaultRoute
    - SubscribeRoute
    - UnsubscribeRoute
    - GetCampaignRoute
    - GetCampaignSettingsRoute
    - GetCharacterRoute
    - SaveCharacterRoute
    - GetNotificationsRoute
    - AddItemRoute
    - RemoveItemRoute
    Properties:
      ApiId: !Ref GauntletWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: !Sub
        - ${StageName} Stage
        - { StageName: !Ref StageName }
      DeploymentId: !Ref Deployment
      ApiId: !Ref GauntletWebSocket
      Tags:
        project: Gauntlet BP Tracker
        stage: !Ref StageName
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: Stage
    Properties: 
      DomainName: !Ref DomainName
      ApiId: !Ref GauntletWebSocket
      Stage: !Ref Stage
      ApiMappingKey: !Ref Stage

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultInteg
  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations
  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: default/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  DefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com

  SubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: subscribe
      AuthorizationType: NONE
      OperationName: SubscribeRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SubscribeInteg
  SubscribeInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Subscribe Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscribeFunction.Arn}/invocations
  SubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: subscribe/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  SubscribePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SubscribeFunction
      Principal: apigateway.amazonaws.com

  UnsubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: unsubscribe
      AuthorizationType: NONE
      OperationName: UnsubscribeRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref UnsubscribeInteg
  UnsubscribeInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Unsubscribe Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnsubscribeFunction.Arn}/invocations
  UnsubscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: unsubscribe/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'          
  UnsubscribePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UnsubscribeFunction
      Principal: apigateway.amazonaws.com

  GetCampaignRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: getcampaign
      AuthorizationType: NONE
      OperationName: GetCampaignRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetCampaignInteg
  GetCampaignInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Get Campaign Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCampaignFunction.Arn}/invocations
  GetCampaignFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getcampaign/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  GetCampaignPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCampaignFunction
      Principal: apigateway.amazonaws.com

  GetCampaignSettingsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: getcampaignsettings
      AuthorizationType: NONE
      OperationName: GetCampaignSettingsRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetCampaignSettingsInteg
  GetCampaignSettingsInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Get Campaign Settings Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCampaignSettingsFunction.Arn}/invocations
  GetCampaignSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getsettings/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  GetCampaignSettingsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCampaignSettingsFunction
      Principal: apigateway.amazonaws.com

  GetCharacterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: getcharacter
      AuthorizationType: NONE
      OperationName: GetCharacterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetCharacterInteg
  GetCharacterInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Get Character Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCharacterFunction.Arn}/invocations
  GetCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getcharacter/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  GetCharacterPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCharacterFunction
      Principal: apigateway.amazonaws.com

  SaveCharacterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: savecharacter
      AuthorizationType: NONE
      OperationName: SaveCharacterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SaveCharacterInteg
  SaveCharacterInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Save Character Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveCharacterFunction.Arn}/invocations
  SaveCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: savecharacter/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  SaveCharacterPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SaveCharacterFunction
      Principal: apigateway.amazonaws.com

  GetNotificationsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: getnotifications
      AuthorizationType: NONE
      OperationName: GetNotificationsRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetNotificationsInteg
  GetNotificationsInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Get Notifications Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNotificationsFunction.Arn}/invocations
  GetNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getnotifications/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  GetNotificationsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetNotificationsFunction
      Principal: apigateway.amazonaws.com

  AddItemRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: additem
      AuthorizationType: NONE
      OperationName: AddItemRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AddItemInteg
  AddItemInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Purchase Item Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddItemFunction.Arn}/invocations
  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: additem/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  AddItemPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddItemFunction
      Principal: apigateway.amazonaws.com

  RemoveItemRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GauntletWebSocket
      RouteKey: removeitem
      AuthorizationType: NONE
      OperationName: RemoveItemRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RemoveItemInteg
  RemoveItemInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GauntletWebSocket
      Description: Purchase Item Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveItemFunction.Arn}/invocations
  RemoveItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: removeitem/
      Handler: app.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GauntletWebSocket}/*'
  RemoveItemPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GauntletWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RemoveItemFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebSocketID:
    Description: "The generated API ID"
    Value: !Ref GauntletWebSocket
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref GauntletWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
